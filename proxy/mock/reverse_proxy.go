// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-api-router/proxy"
	"net/http"
	"sync"
)

// Ensure, that IReverseProxyMock does implement proxy.IReverseProxy.
// If this is not the case, regenerate this file with moq.
var _ proxy.IReverseProxy = &IReverseProxyMock{}

// IReverseProxyMock is a mock implementation of proxy.IReverseProxy.
//
// 	func TestSomethingThatUsesIReverseProxy(t *testing.T) {
//
// 		// make and configure a mocked proxy.IReverseProxy
// 		mockedIReverseProxy := &IReverseProxyMock{
// 			ServeHTTPFunc: func(rw http.ResponseWriter, req *http.Request)  {
// 				panic("mock out the ServeHTTP method")
// 			},
// 		}
//
// 		// use mockedIReverseProxy in code that requires proxy.IReverseProxy
// 		// and then make assertions.
//
// 	}
type IReverseProxyMock struct {
	// ServeHTTPFunc mocks the ServeHTTP method.
	ServeHTTPFunc func(rw http.ResponseWriter, req *http.Request)

	// calls tracks calls to the methods.
	calls struct {
		// ServeHTTP holds details about calls to the ServeHTTP method.
		ServeHTTP []struct {
			// Rw is the rw argument value.
			Rw http.ResponseWriter
			// Req is the req argument value.
			Req *http.Request
		}
	}
	lockServeHTTP sync.RWMutex
}

// ServeHTTP calls ServeHTTPFunc.
func (mock *IReverseProxyMock) ServeHTTP(rw http.ResponseWriter, req *http.Request) {
	if mock.ServeHTTPFunc == nil {
		panic("IReverseProxyMock.ServeHTTPFunc: method is nil but IReverseProxy.ServeHTTP was just called")
	}
	callInfo := struct {
		Rw  http.ResponseWriter
		Req *http.Request
	}{
		Rw:  rw,
		Req: req,
	}
	mock.lockServeHTTP.Lock()
	mock.calls.ServeHTTP = append(mock.calls.ServeHTTP, callInfo)
	mock.lockServeHTTP.Unlock()
	mock.ServeHTTPFunc(rw, req)
}

// ServeHTTPCalls gets all the calls that were made to ServeHTTP.
// Check the length with:
//     len(mockedIReverseProxy.ServeHTTPCalls())
func (mock *IReverseProxyMock) ServeHTTPCalls() []struct {
	Rw  http.ResponseWriter
	Req *http.Request
} {
	var calls []struct {
		Rw  http.ResponseWriter
		Req *http.Request
	}
	mock.lockServeHTTP.RLock()
	calls = mock.calls.ServeHTTP
	mock.lockServeHTTP.RUnlock()
	return calls
}
